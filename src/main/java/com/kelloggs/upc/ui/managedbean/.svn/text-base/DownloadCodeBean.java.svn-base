package com.kelloggs.upc.ui.managedbean;

import static com.kelloggs.upc.ui.common.UPCConstants.BATCH_TYPE_NORMAL;
import static com.kelloggs.upc.ui.common.UPCConstants.BUFFER_SIZE;
import static com.kelloggs.upc.ui.common.UPCConstants.EMPTY_STRING;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ViewScoped;
import javax.faces.component.html.HtmlSelectOneMenu;
import javax.faces.context.ExternalContext;
import javax.faces.context.FacesContext;
import javax.faces.event.ValueChangeEvent;
import javax.faces.model.SelectItem;

import org.apache.log4j.Logger;

import com.kelloggs.upc.common.dto.BatchDTO;
import com.kelloggs.upc.common.dto.BatchsDTO;
import com.kelloggs.upc.common.dto.DownloadCodeDTO;
import com.kelloggs.upc.common.dto.PackDTO;
import com.kelloggs.upc.common.dto.PacksDTO;
import com.kelloggs.upc.common.dto.PromotionDTO;
import com.kelloggs.upc.common.dto.PromotionsDTO;
import com.kelloggs.upc.ui.common.UPCApplicationException;
import com.kelloggs.upc.ui.common.UPCConstants;
import com.kelloggs.upc.ui.common.UPCConstants.GenerateCodeStatus;
import com.kelloggs.upc.ui.delegator.DownloadCodeDelegator;
import com.kelloggs.upc.ui.delegator.GenerateCodeDelegator;
/**
 * The Class DownloadCodeBean.
 */
@ManagedBean(name = "downloadCodeBean")
@ViewScoped
public class DownloadCodeBean extends BaseBean {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	/** The Constant LOGGER. */
	static final Logger LOGGER = Logger.getLogger(DownloadCodeBean.class);
	// =================================================
	// Accessors
	// =================================================
	/*
	 * @ManagedProperty(value = "#{ApplicationBean}") private ApplicationBean
	 * applicationBean;
	 */

	/** The current type. */
	private String currentType = EMPTY_STRING;
	
	/** The country value. */
	private String countryValue = EMPTY_STRING;
	
	/** The brand value. */
	private String brandValue = EMPTY_STRING;
	
	/** The promotion value. */
	private String promotionValue = EMPTY_STRING;
	
	/** The package value. */
	private String packageValue = EMPTY_STRING;

	// private List<SelectItem> countryList = new ArrayList<SelectItem>();

	/** The promotion list. */
	private List<SelectItem> promotionList = new ArrayList<SelectItem>();

	/** The download code out put. */
	private DownloadCodeDTO downloadCodeOutPut = null;

	/** The country names. */
	private HtmlSelectOneMenu countryNames;

	/** The brands. */
	private List<SelectItem> brands = new ArrayList<SelectItem>();

	/** The package list. */
	private List<SelectItem> packageList = new ArrayList<SelectItem>();

	/** The package map. */
	private Map<String, PackDTO> packageMap = new HashMap<String, PackDTO>();

	/** The batch history list. */
	private List<BatchVO> batchHistoryList = new ArrayList<BatchVO>();

	/** The batch. */
	private String batch;

	/** The codes. */
	private String codes;

	/** The downloaded date. */
	private Date downloadedDate;

	/** The user id. */
	private String userId;

	/** The generated date. */
	private Date generatedDate;

	/** The generated by. */
	private String generatedBy;

	/** The downloaded by. */
	private String downloadedBy;

	/** The date. */
	private Date date;

	/** The header. */
	private String header;

	/** The batchs dto. */
	private BatchsDTO batchsDTO;

	/** The promotion batch id. */
	private int promotionBatchID;

	/**
	 * Gets the current type.
	 *
	 * @return the current type
	 */
	public String getCurrentType() {
		return currentType;
	}

	/**
	 * Sets the current type.
	 *
	 * @param iCurrentType the new current type
	 */
	public void setCurrentType(final String iCurrentType) {
		this.currentType = iCurrentType;
	}

	/**
	 * Gets the country value.
	 *
	 * @return the country value
	 */
	public String getCountryValue() {
		return countryValue;
	}

	/**
	 * Sets the country value.
	 *
	 * @param iCountryValue the new country value
	 */
	public void setCountryValue(final String iCountryValue) {
		this.countryValue = iCountryValue;
	}

	/**
	 * Gets the brand value.
	 *
	 * @return the brand value
	 */
	public String getBrandValue() {
		return brandValue;
	}

	/**
	 * Sets the brand value.
	 *
	 * @param iBrandValue the new brand value
	 */
	public void setBrandValue(final String iBrandValue) {
		this.brandValue = iBrandValue;
	}

	/**
	 * Gets the promotion value.
	 *
	 * @return the promotion value
	 */
	public String getPromotionValue() {
		return promotionValue;
	}

	/**
	 * Sets the promotion value.
	 *
	 * @param iPromotionValue the new promotion value
	 */
	public void setPromotionValue(final String iPromotionValue) {
		this.promotionValue = iPromotionValue;
	}

	/**
	 * Gets the package value.
	 *
	 * @return the package value
	 */
	public String getPackageValue() {
		return packageValue;
	}

	/**
	 * Sets the package value.
	 *
	 * @param iPackageValue the new package value
	 */
	public void setPackageValue(final String iPackageValue) {
		this.packageValue = iPackageValue;
	}

	/**
	 * Gets the country names.
	 *
	 * @return the country names
	 */
	public HtmlSelectOneMenu getCountryNames() {
		return countryNames;
	}

	/**
	 * Sets the country names.
	 *
	 * @param iCountryNames the new country names
	 */
	public void setCountryNames(final HtmlSelectOneMenu iCountryNames) {
		this.countryNames = iCountryNames;
	}

	/**
	 * Gets the brands.
	 *
	 * @return the brands
	 */
	public List<SelectItem> getBrands() {
		return brands;
	}

	/**
	 * Sets the brands.
	 *
	 * @param iBrands the new brands
	 */
	public void setBrands(final List<SelectItem> iBrands) {
		this.brands = iBrands;
	}

	
	/**
	 * Gets the package list.
	 *
	 * @return the package list
	 */
	public List<SelectItem> getPackageList() {
		return packageList;
	}

	/**
	 * Sets the package list.
	 *
	 * @param iPackageList the new package list
	 */
	public void setPackageList(final List<SelectItem> iPackageList) {
		this.packageList = iPackageList;
	}

	/**
	 * Gets the package map.
	 *
	 * @return the package map
	 */
	public Map<String, PackDTO> getPackageMap() {
		return packageMap;
	}

	/**
	 * Sets the package map.
	 *
	 * @param iPackageMap the i package map
	 */
	public void setPackageMap(final Map<String, PackDTO> iPackageMap) {
		this.packageMap = iPackageMap;
	}

	/**
	 * Gets the header.
	 *
	 * @return the header
	 */
	public String getHeader() {
		return header;
	}

	/**
	 * Sets the header.
	 *
	 * @param iHeader the new header
	 */
	public void setHeader(final String iHeader) {
		this.header = iHeader;
	}

	/**
	 * Instantiates a new download code bean.
	 */
	public DownloadCodeBean() {
		LOGGER.debug(" Entered DownloadCodeBean Service ");
		batchHistoryList.clear();
		packageList.clear();
		promotionList.clear();
		// countryList.clear();

		// Getting all countries from application scope
		// CountriesDTO countriesDTO = (CountriesDTO)
		// FacesContext.getCurrentInstance().getExternalContext().getApplicationMap().get("countriesDTO");

		LOGGER.debug(" Exsited from DownloadCodeBean Service ");
	}

	/*
	 * @PostConstruct public void init() {
	 * 
	 * SelectItem item = new SelectItem("", ""); List<CountryDTO> countryDTOList
	 * = applicationBean.getCountries();
	 * 
	 * countryList.add(new SelectItem("0", "Select"));
	 * 
	 * for(CountryDTO country : countryDTOList){ item = new
	 * SelectItem(country.getCountryID(), country.getCountryName());
	 * countryList.add(item); }
	 * 
	 * System.out.println("Value: " + applicationBean); }
	 */
	/**
	 * Country value changed.
	 *
	 * @param event the event
	 */
	public void countryValueChanged(final ValueChangeEvent event) {
		LOGGER.debug(" Entered countryValueChanged Service ");
		try {
			batchHistoryList.clear();
			packageList.clear();
			promotionList.clear();
			if (null != event.getNewValue()) {
				String countryId = (String) event.getNewValue();
				setBrandValue(countryId);
				PromotionsDTO promotionsDTO = DownloadCodeDelegator.getPromotions(countryId);
				List<PromotionDTO> aPromotionList = promotionsDTO.getaPromotions();
				//promotionList.add(new SelectItem("0", "Select"));

				if (aPromotionList != null) {
					for (int i = 0; i < aPromotionList.size(); i++) {
						SelectItem item = new SelectItem(aPromotionList.get(i).getPromotionID(), aPromotionList.get(i).getPromotionName());
						promotionList.add(item);
					}
				}
			}
		} catch (UPCApplicationException aUpcApplicationException) {
			FacesMessage aFacesMessage = new FacesMessage(errorResourceBundle.getString(aUpcApplicationException.getErrorKey() + ".error"));
			aFacesMessage.setSeverity(FacesMessage.SEVERITY_ERROR);
			FacesContext.getCurrentInstance().addMessage("userManagement:system", aFacesMessage);
		}
		
		LOGGER.debug(" Existed from countryValueChanged Service ");
	}

	/**
	 * Promotion value changed.
	 *
	 * @param event the event
	 */
	public void promotionValueChanged(final ValueChangeEvent event) {
		LOGGER.debug(" Entered promotionValueChanged Service ");
		try {
			batchHistoryList.clear();
			packageMap.clear();
			packageList.clear();
			if (null != event.getNewValue()) {
				String promotionId = (String) event.getNewValue();
				setPromotionValue(promotionId);
				PacksDTO packsdto = DownloadCodeDelegator.getPackages(promotionId);

				List<PackDTO> packList = packsdto.getaPacks();
				//packageList.add(new SelectItem("0", "Select"));

				if (packList != null) {
					for (int i = 0; i < packList.size(); i++) {
						SelectItem item = new SelectItem(packList.get(i).getPackCodeSetID(), packList.get(i).getPackCodeSetName());
						packageList.add(item);
						packageMap.put(Integer.valueOf(packList.get(i).getPackCodeSetID()).toString(), packList.get(i));
					}
					setPackageMap(packageMap);
				}
			}
		} catch (UPCApplicationException aUpcApplicationException) {
			FacesMessage aFacesMessage = new FacesMessage(errorResourceBundle.getString(aUpcApplicationException.getErrorKey() + ".error"));
			aFacesMessage.setSeverity(FacesMessage.SEVERITY_ERROR);
			FacesContext.getCurrentInstance().addMessage("userManagement:system", aFacesMessage);
		}
		
		LOGGER.debug(" Existed from promotionValueChanged Service ");
	}

	/**
	 * Package value changed.
	 *
	 * @param event the event
	 */
	public void packageValueChanged(final ValueChangeEvent event) {
		LOGGER.debug(" Entered packageValueChanged Service ");
		try {
			batchHistoryList.clear();
			BatchVO batchVO = null;
			List<BatchVO> batchVOList = null;

			if (null != event.getNewValue()) {
				String packageId = (String) event.getNewValue();
				setPackageValue(packageId);
				BatchsDTO batchesDTO = GenerateCodeDelegator.getBatchHistories(packageId);
				List<BatchDTO> batchList = batchesDTO.getaBatchs();
				int siNumber = 0;
				if (null != batchList) {

					batchVOList = new ArrayList<BatchVO>(batchList.size());
					for (BatchDTO batchDTO : batchList) {
						
							if (batchDTO.getType() == BATCH_TYPE_NORMAL) {
							
								batchVO = new BatchVO();
								siNumber++;
								batchVO.setBatchSINum(siNumber);
								batchVO.setCodes(batchDTO.getNoOfCodes());
								batchVO.setGeneratedBy(batchDTO.getGeneratedBy());
								batchVO.setGeneratedDate(new Date(batchDTO.getGeneratedDate().getTimeInMillis()));
								batchVO.setDownloadedBy(batchDTO.getDownloadedBy());
								batchVO.setDownloadedDate(batchDTO.getDownloadedDate());
								batchVO.setPromotionBatchID(batchDTO.getPromotionBatchID());
								batchVO.setType(batchDTO.getType());
								batchVO.setStatus(batchDTO.getStatus());
								
								batchVOList.add(batchVO);
							}
					}
					setBatchHistoryList(batchVOList);
				}

			}
		} catch (UPCApplicationException aUpcApplicationException) {
			FacesMessage aFacesMessage = new FacesMessage(errorResourceBundle.getString(aUpcApplicationException.getErrorKey() + ".error"));
			aFacesMessage.setSeverity(FacesMessage.SEVERITY_ERROR);
			FacesContext.getCurrentInstance().addMessage("userManagement:system", aFacesMessage);
		}
		LOGGER.debug(" Existed from packageValueChanged Service ");
	}

	/**
	 * Download csv.
	 *
	 * @param batchDTO the batch dto
	 * @return the string
	 */
	public String downloadCSV(final BatchVO batchDTO) {
		LOGGER.debug(" Entered downloadCSV Service");
		BufferedInputStream bis = null;
		BufferedOutputStream bos = null;
		try {
			final FacesContext facesContext = FacesContext.getCurrentInstance();
			final ExternalContext externalContext = facesContext.getExternalContext();
			SignInBean signInBean = (SignInBean) externalContext.getSessionMap().get("SignInBean");

			int aBatchId = batchDTO.getPromotionBatchID();
			bis = new BufferedInputStream(new ByteArrayInputStream(DownloadCodeDelegator.getDownloadFile(promotionValue, packageValue, aBatchId, String.valueOf(signInBean.getLoginDTO().getUserID()))), BUFFER_SIZE);
			bos = new BufferedOutputStream(externalContext.getResponseOutputStream(), BUFFER_SIZE);
			externalContext.setResponseContentType("text/csv");
			externalContext.setResponseHeader("Content-Disposition", "attachment; filename=\"Code_Promotion_" + promotionValue + "_Batch_" + aBatchId + ".csv\"");
			
		
			//int count = 0;
			byte[] buffer = new byte[BUFFER_SIZE];
			int bytesRead;

			while ((bytesRead = bis.read(buffer)) != -1) {
				bos.write(buffer, 0, bytesRead);
			}

			bos.flush();
			facesContext.responseComplete();
		} catch (UPCApplicationException aUpcApplicationException) {
			FacesMessage aFacesMessage = new FacesMessage(errorResourceBundle.getString(aUpcApplicationException.getErrorKey() + ".error"));
			aFacesMessage.setSeverity(FacesMessage.SEVERITY_ERROR);
			FacesContext.getCurrentInstance().addMessage("userManagement:system", aFacesMessage);
		} catch (IOException e) {
			FacesMessage aFacesMessage = new FacesMessage(resourceBundle.getString(UPCConstants.UPC_UI_SYSTEM_ERROR_KEY + ".error"));
			aFacesMessage.setSeverity(FacesMessage.SEVERITY_ERROR);
			FacesContext.getCurrentInstance().addMessage("userManagement:system", aFacesMessage);
		} finally {
			try {
			if (null != bos) {
				bos.close();
			}
			if (null != bis) {
				bis.close();
			}
			} catch (IOException e) {
				LOGGER.debug(" " + e);
			}
		}
		LOGGER.debug("Existed from downloadCSV Service ");
		return null;
	}

	/**
	 * Gets the generate code status.
	 *
	 * @param status the status
	 * @return the generate code status
	 */
	public String getGenerateCodeStatus(final short status) {
		
		
		return resourceBundle.getString(GenerateCodeStatus.GENERATE_CODE_STATUS_LOOKUP.get(status).getMsgKey());
		
	}

	
	/**
	 * Checks if is download code disabled.
	 *
	 * @param status the status
	 * @return true, if is download code disabled
	 */
	public boolean isDownloadCodeDisabled(final short status) {
		
		return (GenerateCodeStatus.COMPLETE.getStatus() != status);
			
	}
	
	
	/**
	 * Gets the batch.
	 *
	 * @return the batch
	 */
	public String getBatch() {
		return batch;
	}

	/**
	 * Sets the batch.
	 *
	 * @param iBatch the new batch
	 */
	public void setBatch(final String iBatch) {
		this.batch = iBatch;
	}

	/**
	 * Gets the codes.
	 *
	 * @return the codes
	 */
	public String getCodes() {
		return codes;
	}

	/**
	 * Sets the codes.
	 *
	 * @param iCodes the new codes
	 */
	public void setCodes(final String iCodes) {
		this.codes = iCodes;
	}

	/**
	 * Gets the download code out put.
	 *
	 * @return the download code out put
	 */
	public DownloadCodeDTO getDownloadCodeOutPut() {
		return downloadCodeOutPut;
	}

	/**
	 * Sets the download code out put.
	 *
	 * @param iDownloadCodeOutPut the new download code out put
	 */
	public void setDownloadCodeOutPut(final DownloadCodeDTO iDownloadCodeOutPut) {
		this.downloadCodeOutPut = iDownloadCodeOutPut;
	}

	/**
	 * Gets the user id.
	 *
	 * @return the user id
	 */
	public String getUserId() {
		return userId;
	}

	/**
	 * Sets the user id.
	 *
	 * @param iUserId the new user id
	 */
	public void setUserId(final String iUserId) {
		this.userId = iUserId;
	}

	/**
	 * Gets the generated date.
	 *
	 * @return the generated date
	 */
	public Date getGeneratedDate() {
		return generatedDate;
	}

	/**
	 * Sets the generated date.
	 *
	 * @param iGeneratedDate the new generated date
	 */
	public void setGeneratedDate(final Date iGeneratedDate) {
		this.generatedDate = iGeneratedDate;
	}

	/**
	 * Gets the downloaded by.
	 *
	 * @return the downloaded by
	 */
	public String getDownloadedBy() {
		return downloadedBy;
	}

	/**
	 * Sets the downloaded by.
	 *
	 * @param iDownloadedBy the new downloaded by
	 */
	public void setDownloadedBy(final String iDownloadedBy) {
		this.downloadedBy = iDownloadedBy;
	}

	/**
	 * Gets the date.
	 *
	 * @return the date
	 */
	public Date getDate() {
		return date;
	}

	/**
	 * Sets the date.
	 *
	 * @param iDate the new date
	 */
	public void setDate(final Date iDate) {
		this.date = iDate;
	}

	/**
	 * Gets the batch history list.
	 *
	 * @return the batch history list
	 */
	public List<BatchVO> getBatchHistoryList() {
		return batchHistoryList;
	}

	/**
	 * Sets the batch history list.
	 *
	 * @param iBatchHistoryList the new batch history list
	 */
	public void setBatchHistoryList(final List<BatchVO> iBatchHistoryList) {
		this.batchHistoryList = iBatchHistoryList;
	}

	

	/**
	 * Gets the promotion list.
	 *
	 * @return the promotion list
	 */
	public List<SelectItem> getPromotionList() {
		return promotionList;
	}

	/**
	 * Sets the promotion list.
	 *
	 * @param iPromotionList the new promotion list
	 */
	public void setPromotionList(final List<SelectItem> iPromotionList) {
		this.promotionList = iPromotionList;
	}

	/**
	 * Gets the i batchs dto.
	 *
	 * @return the i batchs dto
	 */
	public BatchsDTO getiBatchsDTO() {
		return batchsDTO;
	}

	/**
	 * Sets the i batchs dto.
	 *
	 * @param iBatchsDTO the new i batchs dto
	 */
	public void setiBatchsDTO(final BatchsDTO iBatchsDTO) {
		this.batchsDTO = iBatchsDTO;
	}

	/**
	 * Gets the promotion batch id.
	 *
	 * @return the promotion batch id
	 */
	public int getPromotionBatchID() {
		return promotionBatchID;
	}

	/**
	 * Sets the promotion batch id.
	 *
	 * @param iPromotionBatchID the new promotion batch id
	 */
	public void setPromotionBatchID(final int iPromotionBatchID) {
		this.promotionBatchID = iPromotionBatchID;
	}

	/**
	 * Gets the generated by.
	 *
	 * @return the generated by
	 */
	public String getGeneratedBy() {
		return generatedBy;
	}

	/**
	 * Sets the generated by.
	 *
	 * @param iGeneratedBy the new generated by
	 */
	public void setGeneratedBy(final String iGeneratedBy) {
		this.generatedBy = iGeneratedBy;
	}

	/**
	 * Gets the downloaded date.
	 *
	 * @return the downloaded date
	 */
	public Date getDownloadedDate() {
		return downloadedDate;
	}

	/**
	 * Sets the downloaded date.
	 *
	 * @param iDownloadedDate the new downloaded date
	 */
	public void setDownloadedDate(final Date iDownloadedDate) {
		this.downloadedDate = iDownloadedDate;
	}

}
